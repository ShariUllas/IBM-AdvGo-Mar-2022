Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodoly:
    No powerpoints
    100% Hands on
    Atleast 50% of the participants should have completed the assignments 

About You:
    Name
    Experience
    Primary Skillset
    Experience in Go
    Any intesting books / shows you read / watched


interfaces
functional programming
concurrency

interfaces
    implementation is 'implicit'
    

Higher Order functions
    Functions that can be treated like 'data'
        Functions can be assigned to variables
        Functions can be passed as arguments to other functions
        Functions can be returned as return values by other functions

Concurrency
    Golang is built FOR concurrency
    go, select, range, chan (data type), <- (channel operator)

    DO NOT ASSUME:
        1. the time taken for a goroutine to complete
        2. the order in which goroutines invoked / complete

    To detect race conditions
        go run --race demo-06.go 
        
        go build --race demo-06.go


    channel
        //create
        ch := make(chan int)

        //send data 
        ch <- 100

        //receive data
        <- ch

    Receive operation is ALWAYS a blocking operation

    Send operation is blocked until a Receive operation is initiated

Assignment-01:
    modify demo-20.go to generate the prime numbers until the user hits ENTER key
        NOTE: do NOT capture the ENTER key from the genPrimes function